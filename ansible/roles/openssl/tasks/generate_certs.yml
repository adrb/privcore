---

- name: generating keys
  command: openssl genrsa -out private/{{item}}_key.pem 4096 chdir={{openssl_config.ca_dir}} creates=private/{{item}}_key.pem
  with_items: "{{ groups['all'] }}"

- name: creating CSRs
  command: openssl req -config openssl.cnf -key private/{{item}}_key.pem -new -sha256 -addext "subjectAltName = DNS:{{item}}" -subj "/O={{openssl_config.organization_name}}/CN={{item}}" -out certs/{{item}}_csr.pem chdir={{openssl_config.ca_dir}} creates=certs/{{item}}_csr.pem
  with_items: "{{ groups['all'] }}"

- name: signing the CSRs
  command: openssl ca -config openssl.cnf -batch -extensions server_cert -days 3650 -notext -md sha256 -in certs/{{item}}_csr.pem -out certs/{{item}}_cert.pem chdir={{openssl_config.ca_dir}} creates=certs/{{item}}_cert.pem
  with_items: "{{ groups['all'] }}"

- name: creating CRL
  command: openssl ca -config openssl.cnf -gencrl -out certs/{{openssl_config.local_domain}}_ca_crl.pem chdir={{openssl_config.ca_dir}} creates=certs/{{openssl_config.local_domain}}_ca_crl.pem

  # Revoking via: openssl ca -config openssl.cnf -revoke certs/example_cert.pem
  # After that, donf forget to recreate CRL file: openssl ca -config openssl.cnf -gencrl -out certs/ca_crl.pem
  # Finally verify: openssl verify -crl_check -CApath /etc/ssl/CA/certs -CAfile /etc/ssl/CA/certs/{{openssl_config.local_domain}}_ca_cert.pem /etc/ssl/CA/certs/example_cert.pem

  # It's done mainly for proper CRL verification
  # You can also concatenate the PEM CRL and the CA chain together (CRL last)
- name: rehasing all certificates
  command: c_rehash {{openssl_config.ca_dir}}/certs
  changed_when: false

